scalar Date
scalar Time
scalar DateTime

type Query {
  concepts(
    where: ConceptConditions = {}
    sort: ConceptSorting = RELEVANCE
    slice: SliceInput = {}
  ): [Concept!]!

  pattern(
    idOrName: String!
  ): Pattern

  match(
    statements: [String!]!
  ): [[PatternVariableMatch]!]!

  concept(
    where: ConceptConditions!
  ): Concept
}

type Mutation {
  saveConcept(label: String!): Concept!

  savePattern(
    name: String!,
    extendsIds: [String!] = [],
    statements: [String!] = []
  ): Pattern!
}

type Pattern {
  id: ID!
  name: String!
  extends: [Pattern!]!
  statements: [PatternStatement!]!
  matches: [PatternMatch!]!
}

type PatternStatement {
  id: ID!
  source: String!
  parts: [PatternPart!]!
  matches: [PatternStatementMatch!]!
}

type PatternPart {
  label: String!
  type: PatternPartType!
}

type PatternMatch {
  id: ID!
  pattern: Pattern!
  statementMatches: [PatternStatementMatch!]!
  variableMatches: [PatternVariableMatch!]!
}

type PatternStatementMatch {
  id: ID!
  statement: PatternStatement!
  term: Term!
  ngramMatches: [NgramMatch!]!
}

type PatternVariableMatch {
  name: String!
  term: Term!
}

type NgramMatch {
  part: PatternPart!
  ngram: Ngram!
}

enum PatternPartType {
  NGRAM
  VARIABLE
}

type Ngram {
  label: String!
  term: Term!
  of: Term!
}

type Concept {
  id: ID!
  label: String!
  term: Term!
}

type MetaConcept {
  id: ID!
  label: String!
  terms: [Term!]!
}

type DateTimeValue {
  dateTime: DateTime!
}

type Term {
  id: ID!
  label: String!
  children: [Term!]!
  concepts: [Concept!]!
  aggressiveHash: String!
  stopHash: String!
}

type Location {
  longitude: Float!
  latitude: Float!
}

type Entry {
  id: ID!
  title: String
  text: String!
  parts: [Entry!]!
  concepts: [Concept!]!
}

input SliceInput {
  from: Int = 0
  to: Int
}

enum ConceptSorting {
  RELEVANCE
  LABEL_ASC
  LABEL_DESC
}

input IDConditions {
  EQ: ID
  IN: [ID!]
  NOT_EQ: ID
  NOT_IN: [ID!]
}

input ConceptConditions {
  id: IDConditions
  term: [TermConditions!]
}

input TermConditions {
  id: IDConditions
  parents: [TermConditions!]
  children: [TermConditions!]
}

input EntryQueryInput {
  text: String!
}